// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package store

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type IssueStatus string

const (
	IssueStatusOpen       IssueStatus = "open"
	IssueStatusInProgress IssueStatus = "in_progress"
	IssueStatusClosed     IssueStatus = "closed"
	IssueStatusRejected   IssueStatus = "rejected"
)

func (e *IssueStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IssueStatus(s)
	case string:
		*e = IssueStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for IssueStatus: %T", src)
	}
	return nil
}

type NullIssueStatus struct {
	IssueStatus IssueStatus
	Valid       bool // Valid is true if IssueStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIssueStatus) Scan(value interface{}) error {
	if value == nil {
		ns.IssueStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IssueStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIssueStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IssueStatus), nil
}

func (e IssueStatus) Valid() bool {
	switch e {
	case IssueStatusOpen,
		IssueStatusInProgress,
		IssueStatusClosed,
		IssueStatusRejected:
		return true
	}
	return false
}

type IssueType string

const (
	IssueTypeBug            IssueType = "bug"
	IssueTypeFeature        IssueType = "feature"
	IssueTypeTask           IssueType = "task"
	IssueTypeFeatureRequest IssueType = "feature_request"
)

func (e *IssueType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = IssueType(s)
	case string:
		*e = IssueType(s)
	default:
		return fmt.Errorf("unsupported scan type for IssueType: %T", src)
	}
	return nil
}

type NullIssueType struct {
	IssueType IssueType
	Valid     bool // Valid is true if IssueType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullIssueType) Scan(value interface{}) error {
	if value == nil {
		ns.IssueType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.IssueType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullIssueType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.IssueType), nil
}

func (e IssueType) Valid() bool {
	switch e {
	case IssueTypeBug,
		IssueTypeFeature,
		IssueTypeTask,
		IssueTypeFeatureRequest:
		return true
	}
	return false
}

type Comment struct {
	ID        int64
	IssueID   int64
	AuthorID  int64
	Content   string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	RemovedAt pgtype.Timestamptz
}

type Issue struct {
	ID          int64
	Title       string
	Description string
	ReporterID  int64
	AssigneeID  pgtype.Int8
	Status      IssueStatus
	Priority    int32
	Type        IssueType
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
	RemovedAt   pgtype.Timestamptz
}

type IssueLabel struct {
	IssueID int64
	LabelID int64
}

type Label struct {
	ID        int64
	Name      string
	Color     pgtype.Text
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	RemovedAt pgtype.Timestamptz
}

type User struct {
	ID        int64
	Firstname string
	Lastname  string
	Email     string
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
	RemovedAt pgtype.Timestamptz
}
